<template>
	<view class="keyboard-input" :style="style">
		<input ref="input" type="text" confirm-type="send" :adjust-position="false" auto-blur class="input" :value="value" @input="onInput"
		 @focus="onFocus" @blur="blur" @confirm="confirm" :confirm-hold="false" />
		<image class="express icon" src="/static/icons/index/express.png" v-if="express" @click="openEmotion"></image>
		<image class="photo icon" src="/static/img/chat_photo.png" v-if="photo" @click="uploadImg"></image>
		<!-- <button @click="test">发送</button> -->
		<uni-popup id="popup-emotion" ref="popupEnotion" :mask="false" type="share">
			<emotion :height="keyboardHeight" @change="changeEmotion" @close="closePop"></emotion>
		</uni-popup>
	</view>
</template>

<script>
	import {
		mapGetters,
		mapMutations
	} from 'vuex'
	import emotion from "./emotion/emotion.nvue"
	export default {
		components: {
			emotion
		},
		props: {
			express: {
				type: Boolean,
				default: false
			},
			photo: {
				type: Boolean,
				default: false
			},
			focus: {
				type: Boolean,
				default: false
			},
			bottom: {
				type: Number,
				default: 0
			}
		},
		data() {
			return {
				isIn:true,
				value: "",
				keyboardHeight: 0,
				popShow: false,
				keyHeight: 0
			}
		},
		computed: {
			...mapGetters([
				'currentUser'
			]),
			style() {
				if (this.focus || this.popShow) {
					return {
						"bottom": this.keyboardHeight + 'px'
					}
				}
				return {
					"bottom": this.bottom + 'px'
				}
			}
		},
		watch: {
			focus(val) {
				if(val){
					this.$refs.input.focus()
				}
			}
		},
		created() {
			this.isIn = true
			uni.onKeyboardHeightChange(res => {
				if(this.isIn){
					if(res.height > 50) this.setKBheight(res.height)
				}
			})
		},
		beforeDestroy() {
			this.isIn = false
		},
		methods: {
			...mapMutations([
				"addMessage",
				"setChoose"
			]),
			changeEmotion(codes) {
				this.value += codes
			},
			closePop() {
				this.$emit("focus", this.keyboardHeight)
				this.popShow = false
				this.$refs.popupEnotion.close()
			},
			onInput(e) {
				this.value = e.detail.value
				this.$emit("input", e)
			},
			blur() {
				/* #ifdef APP-PLUS */
				this.$emit("blur")
				if (!this.popShow) {
					this.$emit("pageUp", 0)
				}
				/* #endif */
			},
			onFocus(e) {
				//let _h = e.detail.height
				// if (this.isIn) {
				// 	this.isIn = false
				// 	setTimeout(() => {
				// 		if (_h < this.keyHeight) {
				// 			_h = this.keyHeight
				// 		}
				// 		this.setKBheight(_h)
				// 	}, 300)
				// }
				//this.setKBheight(_h)
			},
			confirm(e) {
				if (e.detail.value.trim() == '') return
				this.$emit("confirm", e)
				this.value = ""
				//uni.hideKeyboard()
			},
			openEmotion() {
				this.popShow = true
				uni.hideKeyboard()
				this.$refs.popupEnotion.open()
				this.$emit("pageUp", this.keyboardHeight)
			},
			setKBheight(_h) {
				this.$refs.popupEnotion.close()
				this.popShow = false
				this.keyboardHeight = _h
				this.$emit("focus", this.keyboardHeight)
			},
			test() {
				this.$emit("confirm", {
					detail: {
						value: this.value
					}
				})
				this.value = ""
			},
			uploadImg() {
				this.setChoose(true)
				let _this = this
				uni.chooseImage({
					count: 1,
					success: (res) => {
						uni.getImageInfo({
							src: res.tempFilePaths[0],
							success(reult) {
								uni.$emit('senImg', {
									img: reult.path,
									width: reult.width
								})
							}
						})
					}
				});
			}
		}
	}
</script>

<style scoped>
	.keyboard-input {
		position: fixed;
		/* #ifndef APP-PLUS */
		z-index: 999;
		left: 0;
		/* #endif */

		bottom: 0;
		padding: 15rpx 30rpx 25rpx;
		width: 750rpx;
		border-top-color: #e9e9e9;
		border-top-width: 1rpx;
		background-color: #F6F6F6;
		display: flex;
		flex-direction: row;
		justify-content: center;
		align-items: center;
	}

	.input {
		flex: 1;
		background-color: #e6e6e6;
		border-radius: 10rpx;
		/* #ifdef APP-PLUS */
		/* #endif */
		padding: 0 20rpx;
		height: 34px;
		line-height: 34px;
		font-size: 28rpx;
	}

	.icon {
		margin-left: 34rpx;
	}

	.express {
		width: 48rpx;
		height: 47rpx;
	}

	.photo {
		width: 58rpx;
		height: 58rpx;
	}

	.popup-emotion {
		display: flex;
		align-items: center;
	}
</style>